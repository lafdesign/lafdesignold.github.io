/*! Compiled on: 2014-06-05 */
"use strict";define(["modules/app","IDBStore"],function(app,IDBStore){app.factoryManager("$storage",["$q","config",function($q,config){var forceReject=!1,$storageEngine=function(object){var instance=this;this.idbSupported="indexedDB"in window,this.ready=!1,this.idbSupported&&(new IDBStore({dbVersion:config.dbVersion,storeName:"config",keyPath:"id",onStoreReady:function(){var dbConfig=this;this.query(function(item){if(0===item.length)dbConfig.put({table:object.storeName,version:config.dbVersion},function(){instance.trigger()});else if(item[0].version<config.dbVersion){forceReject=!0;var clearer=object;clearer.onStoreReady=function(){this.clear(function(){dbConfig.put({id:item[0].id,table:object.storeName,version:config.dbVersion},function(){instance.trigger()})})},new IDBStore(clearer)}else instance.trigger()},{index:"table",keyRange:this.makeKeyRange({lower:object.storeName,upper:object.storeName})})},indexes:[{name:"table",keyPath:"table",unique:!0}]}),instance.dbObject=object)};return $storageEngine.prototype={constructor:$storageEngine,queue:[],trigger:function(){this.ready=!0;for(var i=0;i<this.queue.length;i++)new IDBStore(this.queue[i]);this.queue.length=0},call:function(callback){return this.idbSupported?(this.dbObject.onStoreReady=callback,this.ready?new IDBStore(this.dbObject):void this.queue.push(this.dbObject)):void 0},remove:function(keyValue){this.idbSupported&&this.call(function(){this.remove(keyValue)})},put:function(object){this.idbSupported&&this.call(function(){this.put(object)})},putBatch:function(object){this.idbSupported&&this.call(function(){this.putBatch(object)})},findOne:function(index,value){var deferred=$q.defer();return(!this.idbSupported||forceReject)&&deferred.reject(),this.call(function(){this.iterate(function(item){deferred.resolve(item)},{index:index,keyRange:this.makeKeyRange({lower:value,upper:value}),onEnd:function(){deferred.reject()}})}),deferred.promise}},$storageEngine}])});