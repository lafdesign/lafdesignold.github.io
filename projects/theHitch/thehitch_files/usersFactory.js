/*! Compiled on: 2014-06-05 */
"use strict";define(["modules/app","storage"],function(app){app.factoryManager("usersFactory",["$q","$storage","$resource","$rootScope","$cookies","$http","config",function($q,$storage,$resource,$rootScope,$cookies,$http,config){var path=config.api+"/me",self=this,$userStorage=new $storage({dbVersion:config.dbVersion,storeName:"user",keyPath:"id",indexes:[{name:"id",keyPath:"id"}]});self.currentUser=null,self.getCurrentUserFromAPI=function(){var deferred=$q.defer();return $cookies.has("access_token")&&$cookies.has("refresh_token")&&$cookies.has("token_expiry")?userResource.get({},function(response){self.setCurrentUser(response.data),deferred.resolve(response.data)},function(){deferred.reject()}):deferred.reject(),deferred.promise},self.setCurrentUser=function(user){$cookies.set("user_id",user.id),self.currentUser=self.format(user),$userStorage.put($.parseJSON(JSON.stringify(user)))},self.clearCache=function(){$userStorage.remove(parseInt($cookies.get("user_id")))},self.update=function(data){var deferred=$q.defer();return userResource.update(data,function(response){deferred.resolve(response.data)}),deferred.promise},self.format=function(user){return user},self.removeCurrentUser=function(){$cookies.remove("user_id")},self.refreshCurrentUser=function(){self.getCurrentUserFromAPI()},self.isLoggedIn=function(){var deferred=$q.defer();return $cookies.has("access_token")&&$cookies.has("refresh_token")&&$cookies.has("token_expiry")?userResource.get({},function(response){deferred.resolve(response.data)},function(){deferred.reject()}):deferred.reject(),deferred.promise},self.getCurrentUser=function(){var deferred=$q.defer();return $cookies.has("user_id")?$userStorage.findOne("id",parseInt($cookies.get("user_id"))).then(function(user){deferred.resolve(self.format(user))},function(){self.getCurrentUserFromAPI().then(function(response){self.currentUser=self.format(response),deferred.resolve(self.currentUser)})}):self.getCurrentUserFromAPI().then(function(response){self.currentUser=self.format(response),deferred.resolve(self.currentUser)}),deferred.promise};var userResource=$resource(path,{},{get:{method:"GET",authentication:!0},update:{method:"PUT",authentication:!0}});return self.getCurrentUserFromAPI(),self}])});